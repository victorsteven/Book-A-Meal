{"version":3,"sources":["../../api/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","require","__dirname","db","sequelize","use_env_variable","Sequelize","database","username","password","fs","readdirSync","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AACA;;AAEA,IAAMA,WAAWC,eAAKD,QAAL,CAAcE,UAAd,CAAjB;AACA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMC,SAASC,QAAQC,YAAY,wBAApB,EAA8CL,GAA9C,CAAf;AACA,IAAMM,KAAK,EAAX;;AAEA,IAAIC,kBAAJ;AACA,IAAIJ,OAAOK,gBAAX,EAA6B;AAC3BD,cAAY,IAAIE,mBAAJ,CAAcR,QAAQD,GAAR,CAAYG,OAAOK,gBAAnB,CAAd,EAAoDL,MAApD,CAAZ;AACD,CAFD,MAEO;AACLI,cAAY,IAAIE,mBAAJ,CAAcN,OAAOO,QAArB,EAA+BP,OAAOQ,QAAtC,EAAgDR,OAAOS,QAAvD,EAAiET,MAAjE,CAAZ;AACD;;AAEDU,aACGC,WADH,CACeT,SADf,EAEGU,MAFH,CAEU,UAACC,IAAD,EAAU;AAChB,SAAQA,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAASnB,QAAvC,IAAqDmB,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA/E;AACD,CAJH,EAKGC,OALH,CAKW,UAACH,IAAD,EAAU;AACjB,MAAMI,QAAQb,UAAUc,MAAV,CAAiBvB,eAAKwB,IAAL,CAAUjB,SAAV,EAAqBW,IAArB,CAAjB,CAAd;AACAV,KAAGc,MAAMG,IAAT,IAAiBH,KAAjB;AACD,CARH;;AAUAI,OAAOC,IAAP,CAAYnB,EAAZ,EAAgBa,OAAhB,CAAwB,UAACO,SAAD,EAAe;AACrC,MAAIpB,GAAGoB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BrB,OAAGoB,SAAH,EAAcC,SAAd,CAAwBrB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGG,SAAH,GAAeA,mBAAf;;AAEAmB,OAAOC,OAAP,GAAiBvB,EAAjB","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\n// import configJson from '../config/config';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(__dirname + '/../config/config.json')[env];\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter((file) => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n"]}