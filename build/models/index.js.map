{"version":3,"sources":["../../api/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","db","console","log","sequelize","environment","Sequelize","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","native","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,QAAQ,GAAGC,cAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,IAAwB,aAApC,C,CAAmD;;AACnD,IAAMC,MAAM,GAAGC,gBAAWJ,GAAX,CAAf;AACA,IAAMK,EAAE,GAAG,EAAX;AACAC,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACA,IAAIQ,SAAJ;;AACA,IAAIL,MAAM,CAACM,WAAP,KAAuB,YAA3B,EAAyC;AACvCD,EAAAA,SAAS,GAAG,IAAIE,kBAAJ,CACVT,OAAO,CAACD,GAAR,CAAYW,OADF,EAEVV,OAAO,CAACD,GAAR,CAAYY,OAFF,EAGVX,OAAO,CAACD,GAAR,CAAYa,OAHF,EAGW;AACnBC,IAAAA,IAAI,EAAEb,OAAO,CAACD,GAAR,CAAYe,OADC;AAEnBC,IAAAA,IAAI,EAAEf,OAAO,CAACD,GAAR,CAAYiB,OAFC;AAGnBC,IAAAA,OAAO,EAAE,UAHU;AAInBC,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAE,IADQ;AAEbC,MAAAA,MAAM,EAAE;AAFK,KAJI;AAQnBC,IAAAA,OAAO,EAAE;AARU,GAHX,CAAZ;AAcD,CAfD,MAeO;AACLd,EAAAA,SAAS,GAAG,IAAIE,kBAAJ,CAAcP,MAAM,CAACoB,QAArB,EAA+BpB,MAAM,CAACqB,QAAtC,EAAgDrB,MAAM,CAACsB,QAAvD,EAAiEtB,MAAjE,CAAZ;AACD;;AACDuB,YAAGC,WAAH,CAAeC,SAAf,EACGC,MADH,CACU,UAAAC,IAAI;AAAA,SAAKA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,IAAI,KAAKjC,QAAvC,IAAqDiC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA5E;AAAA,CADd,EAEGC,OAFH,CAEW,UAACH,IAAD,EAAU;AACjB,MAAMI,KAAK,GAAG1B,SAAS,CAAC2B,MAAV,CAAiBrC,cAAKsC,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAzB,EAAAA,EAAE,CAAC6B,KAAK,CAACG,IAAP,CAAF,GAAiBH,KAAjB;AACD,CALH;;AAMAI,MAAM,CAACC,IAAP,CAAYlC,EAAZ,EAAgB4B,OAAhB,CAAwB,UAACO,SAAD,EAAe;AACrC,MAAInC,EAAE,CAACmC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BpC,IAAAA,EAAE,CAACmC,SAAD,CAAF,CAAcC,SAAd,CAAwBpC,EAAxB;AACD;AACF,CAJD;AAKAA,EAAE,CAACG,SAAH,GAAeA,SAAf;AACAH,EAAE,CAACK,SAAH,GAAeA,kBAAf;eACeL,E","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport configJson from '../config/config';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || 'development'; // Use development if no environment is specified\nconst config = configJson[env];\nconst db = {};\nconsole.log(env);\nlet sequelize;\nif (config.environment === 'production') {\n  sequelize = new Sequelize(\n    process.env.DB_NAME,\n    process.env.DB_USER,\n    process.env.DB_PASS, {\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT,\n      dialect: 'postgres',\n      dialectOption: {\n        ssl: true,\n        native: true,\n      },\n      logging: true,\n    },\n  );\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\nfs.readdirSync(__dirname)\n  .filter(file => (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js'))\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\nexport default db;\n"],"file":"index.js"}